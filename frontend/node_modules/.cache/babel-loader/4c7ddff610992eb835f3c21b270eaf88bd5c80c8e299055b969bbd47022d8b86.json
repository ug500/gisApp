{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amos\\\\gisApp\\\\frontend\\\\src\\\\layers\\\\MunicipalitiesLayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport { GeoJSON } from 'react-leaflet';\nimport { isAlienInMunicipality } from './SpatialQuery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst strongColors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999', '#1b9e77', '#d95f02', '#7570b3'];\nexport default function MunicipalitiesLayer({\n  data,\n  aliens = []\n}) {\n  _s();\n  const layerRef = useRef();\n  const blinkingPolygons = useRef({});\n  const landingPolygonId = useRef(null);\n  const landingLayerRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const blinkState = useRef(true);\n  const lastBlinkTime = useRef(0);\n  const BLINK_INTERVAL = 500;\n  const coloredData = useMemo(() => {\n    if (!data || !Array.isArray(data.features)) return data;\n    return {\n      ...data,\n      features: data.features.map((feature, index) => ({\n        ...feature,\n        properties: {\n          ...feature.properties,\n          colorIndex: index % strongColors.length\n        }\n      }))\n    };\n  }, [data]);\n\n  // Identify and track blinking polygons\n  useEffect(() => {\n    if (!layerRef.current) return;\n    const layer = layerRef.current;\n    const active = {};\n    layer.eachLayer(featureLayer => {\n      const feature = featureLayer.feature;\n      const colorIndex = feature.properties.colorIndex;\n      const originalColor = strongColors[colorIndex];\n      const polygonId = feature.properties.MUN_ID || feature.properties.id || feature.properties.name || `${feature.properties.MUN_HEB || feature.properties.MUN_ENG || Math.random()}`;\n      const isLanding = aliens.some(alien => {\n        var _alien$properties;\n        return ((_alien$properties = alien.properties) === null || _alien$properties === void 0 ? void 0 : _alien$properties.type) === 'landing' && isAlienInMunicipality(alien, feature);\n      });\n      const isInvaded = aliens.some(alien => isAlienInMunicipality(alien, feature));\n      if (isLanding) {\n        landingPolygonId.current = polygonId;\n        landingLayerRef.current = featureLayer;\n        featureLayer._isBlinking = true;\n        active[polygonId] = {\n          layer: featureLayer,\n          type: 'landing'\n        };\n      } else if (isInvaded) {\n        featureLayer._isBlinking = true;\n        active[polygonId] = {\n          layer: featureLayer,\n          type: 'invaded'\n        };\n      } else {\n        // Reset non-blinking polygon\n        featureLayer._isBlinking = false;\n        featureLayer.setStyle({\n          fillColor: originalColor,\n          fillOpacity: 0.2,\n          color: originalColor,\n          weight: 1,\n          opacity: 1\n        });\n      }\n    });\n    blinkingPolygons.current = active;\n  }, [aliens, coloredData]);\n\n  // Flicker via rAF\n  useEffect(() => {\n    const animate = time => {\n      if (!lastBlinkTime.current) lastBlinkTime.current = time;\n      const elapsed = time - lastBlinkTime.current;\n      if (elapsed > BLINK_INTERVAL) {\n        blinkState.current = !blinkState.current;\n        lastBlinkTime.current = time;\n        Object.entries(blinkingPolygons.current).forEach(([id, {\n          layer,\n          type\n        }]) => {\n          if (!layer || !layer._isBlinking) return;\n          const fillColor = blinkState.current ? type === 'landing' ? '#8B0000' : '#FF0000' : 'transparent';\n          const stroke = type === 'landing' ? '#5a0000' : '#cc0000';\n          layer.setStyle({\n            fillColor: fillColor,\n            fillOpacity: blinkState.current ? 0.8 : 0,\n            color: stroke,\n            weight: 3,\n            opacity: 1\n          });\n        });\n      }\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GeoJSON, {\n    data: coloredData,\n    ref: layerRef\n    // ❌ remove style prop — we're handling all styling manually\n    ,\n    onEachFeature: (feature, layer) => {\n      var _feature$properties$c, _feature$properties, _feature$properties2, _feature$properties3;\n      const colorIndex = (_feature$properties$c = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.colorIndex) !== null && _feature$properties$c !== void 0 ? _feature$properties$c : 0;\n      const originalColor = strongColors[colorIndex];\n\n      // Set initial (non-blinking) style manually\n      layer.setStyle({\n        fillColor: originalColor,\n        fillOpacity: 0.2,\n        color: originalColor,\n        weight: 1,\n        opacity: 1\n      });\n      const name = ((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.MUN_HEB) || ((_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.MUN_ENG) || 'Unknown';\n      layer.bindPopup(`רשות: ${name}`);\n      layer._isBlinking = false;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(MunicipalitiesLayer, \"/UJbZ8qnyb+R+HjLZEk3lewNu6o=\");\n_c = MunicipalitiesLayer;\nvar _c;\n$RefreshReg$(_c, \"MunicipalitiesLayer\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","GeoJSON","isAlienInMunicipality","jsxDEV","_jsxDEV","strongColors","MunicipalitiesLayer","data","aliens","_s","layerRef","blinkingPolygons","landingPolygonId","landingLayerRef","animationFrameRef","blinkState","lastBlinkTime","BLINK_INTERVAL","coloredData","Array","isArray","features","map","feature","index","properties","colorIndex","length","current","layer","active","eachLayer","featureLayer","originalColor","polygonId","MUN_ID","id","name","MUN_HEB","MUN_ENG","Math","random","isLanding","some","alien","_alien$properties","type","isInvaded","_isBlinking","setStyle","fillColor","fillOpacity","color","weight","opacity","animate","time","elapsed","Object","entries","forEach","stroke","requestAnimationFrame","cancelAnimationFrame","ref","onEachFeature","_feature$properties$c","_feature$properties","_feature$properties2","_feature$properties3","bindPopup","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Amos/gisApp/frontend/src/layers/MunicipalitiesLayer.js"],"sourcesContent":["import React, { useEffect, useRef, useMemo } from 'react';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport { isAlienInMunicipality } from './SpatialQuery';\r\n\r\nconst strongColors = [\r\n  '#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33',\r\n  '#a65628', '#f781bf', '#999999', '#1b9e77', '#d95f02', '#7570b3'\r\n];\r\n\r\nexport default function MunicipalitiesLayer({ data, aliens = [] }) {\r\n  const layerRef = useRef();\r\n  const blinkingPolygons = useRef({});\r\n  const landingPolygonId = useRef(null);\r\n  const landingLayerRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n  const blinkState = useRef(true);\r\n  const lastBlinkTime = useRef(0);\r\n  const BLINK_INTERVAL = 500;\r\n\r\n  const coloredData = useMemo(() => {\r\n    if (!data || !Array.isArray(data.features)) return data;\r\n    return {\r\n      ...data,\r\n      features: data.features.map((feature, index) => ({\r\n        ...feature,\r\n        properties: {\r\n          ...feature.properties,\r\n          colorIndex: index % strongColors.length\r\n        }\r\n      }))\r\n    };\r\n  }, [data]);\r\n\r\n  // Identify and track blinking polygons\r\n  useEffect(() => {\r\n    if (!layerRef.current) return;\r\n\r\n    const layer = layerRef.current;\r\n    const active = {};\r\n\r\n    layer.eachLayer((featureLayer) => {\r\n      const feature = featureLayer.feature;\r\n      const colorIndex = feature.properties.colorIndex;\r\n      const originalColor = strongColors[colorIndex];\r\n\r\n      const polygonId =\r\n        feature.properties.MUN_ID ||\r\n        feature.properties.id ||\r\n        feature.properties.name ||\r\n        `${feature.properties.MUN_HEB || feature.properties.MUN_ENG || Math.random()}`;\r\n\r\n      const isLanding = aliens.some(\r\n        alien =>\r\n          alien.properties?.type === 'landing' &&\r\n          isAlienInMunicipality(alien, feature)\r\n      );\r\n\r\n      const isInvaded = aliens.some(alien =>\r\n        isAlienInMunicipality(alien, feature)\r\n      );\r\n\r\n      if (isLanding) {\r\n        landingPolygonId.current = polygonId;\r\n        landingLayerRef.current = featureLayer;\r\n        featureLayer._isBlinking = true;\r\n        active[polygonId] = { layer: featureLayer, type: 'landing' };\r\n      } else if (isInvaded) {\r\n        featureLayer._isBlinking = true;\r\n        active[polygonId] = { layer: featureLayer, type: 'invaded' };\r\n      } else {\r\n        // Reset non-blinking polygon\r\n        featureLayer._isBlinking = false;\r\n        featureLayer.setStyle({\r\n          fillColor: originalColor,\r\n          fillOpacity: 0.2,\r\n          color: originalColor,\r\n          weight: 1,\r\n          opacity: 1\r\n        });\r\n      }\r\n    });\r\n\r\n    blinkingPolygons.current = active;\r\n  }, [aliens, coloredData]);\r\n\r\n  // Flicker via rAF\r\n  useEffect(() => {\r\n    const animate = (time) => {\r\n      if (!lastBlinkTime.current) lastBlinkTime.current = time;\r\n\r\n      const elapsed = time - lastBlinkTime.current;\r\n\r\n      if (elapsed > BLINK_INTERVAL) {\r\n        blinkState.current = !blinkState.current;\r\n        lastBlinkTime.current = time;\r\n\r\n        Object.entries(blinkingPolygons.current).forEach(([id, { layer, type }]) => {\r\n          if (!layer || !layer._isBlinking) return;\r\n\r\n          const fillColor = blinkState.current\r\n            ? (type === 'landing' ? '#8B0000' : '#FF0000')\r\n            : 'transparent';\r\n\r\n          const stroke = type === 'landing' ? '#5a0000' : '#cc0000';\r\n\r\n          layer.setStyle({\r\n            fillColor: fillColor,\r\n            fillOpacity: blinkState.current ? 0.8 : 0,\r\n            color: stroke,\r\n            weight: 3,\r\n            opacity: 1\r\n          });\r\n        });\r\n      }\r\n\r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animationFrameRef.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <GeoJSON\r\n      data={coloredData}\r\n      ref={layerRef}\r\n      // ❌ remove style prop — we're handling all styling manually\r\n      onEachFeature={(feature, layer) => {\r\n        const colorIndex = feature.properties?.colorIndex ?? 0;\r\n        const originalColor = strongColors[colorIndex];\r\n\r\n        // Set initial (non-blinking) style manually\r\n        layer.setStyle({\r\n          fillColor: originalColor,\r\n          fillOpacity: 0.2,\r\n          color: originalColor,\r\n          weight: 1,\r\n          opacity: 1\r\n        });\r\n\r\n        const name = feature.properties?.MUN_HEB || feature.properties?.MUN_ENG || 'Unknown';\r\n        layer.bindPopup(`רשות: ${name}`);\r\n\r\n        layer._isBlinking = false;\r\n      }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}