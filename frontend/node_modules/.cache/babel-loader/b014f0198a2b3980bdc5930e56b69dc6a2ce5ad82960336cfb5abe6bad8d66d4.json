{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amos\\\\gisApp\\\\frontend\\\\src\\\\layers\\\\HistoricalInvasionLayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Marker, Polygon, Polyline, useMap } from 'react-leaflet';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst historicalLandingIcon = L.divIcon({\n  html: `<div style=\"font-size: 22px;\">üõ∏</div>`,\n  className: 'historical-landing-icon',\n  iconSize: [30, 30]\n});\nconst historicalAlienIcon = code => L.divIcon({\n  html: `<div style=\"font-size: 20px;\">üëΩ<span style=\"color:#000;font-weight:bold;font-size:12px;\">${code}</span></div>`,\n  className: 'historical-alien-icon',\n  iconSize: [30, 30]\n});\nexport default function HistoricalInvasionLayer({\n  visible,\n  municipalities\n}) {\n  _s();\n  const [history, setHistory] = useState([]);\n  const map = useMap();\n  useEffect(() => {\n    if (!visible) return;\n    axios.get('http://localhost:5000/api/history').then(res => setHistory(res.data)).catch(err => console.error('‚ùå Failed to load historical invasions:', err));\n  }, [visible]);\n  if (!visible || !Array.isArray(history) || !municipalities) return null;\n  const findPolygonByName = name => {\n    return municipalities.features.find(feature => {\n      var _feature$properties, _feature$properties2, _feature$properties3;\n      const polyName = ((_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.MUN_HEB) || ((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.MUN_ENG) || ((_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.name);\n      return polyName === name;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: history.map((inv, idx) => {\n      var _inv$landing;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [((_inv$landing = inv.landing) === null || _inv$landing === void 0 ? void 0 : _inv$landing.coordinates) && /*#__PURE__*/_jsxDEV(Marker, {\n          position: [inv.landing.coordinates[1], inv.landing.coordinates[0]],\n          icon: historicalLandingIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), municipalities.features.map((poly, i) => {\n          var _poly$properties, _poly$properties2, _poly$properties3, _inv$invadedPolygons;\n          const polyName = ((_poly$properties = poly.properties) === null || _poly$properties === void 0 ? void 0 : _poly$properties.MUN_HEB) || ((_poly$properties2 = poly.properties) === null || _poly$properties2 === void 0 ? void 0 : _poly$properties2.MUN_ENG) || ((_poly$properties3 = poly.properties) === null || _poly$properties3 === void 0 ? void 0 : _poly$properties3.name) || '';\n          const isLanding = polyName.trim().toLowerCase() === inv.landing.name.trim().toLowerCase();\n          const isInvaded = (_inv$invadedPolygons = inv.invadedPolygons) === null || _inv$invadedPolygons === void 0 ? void 0 : _inv$invadedPolygons.some(ip => [ip.name].includes(polyName));\n          if (!isLanding && !isInvaded) return null;\n          const coordinates = poly.geometry.coordinates;\n          const isMultiPolygon = poly.geometry.type === 'MultiPolygon';\n          return /*#__PURE__*/_jsxDEV(Polygon, {\n            positions: isMultiPolygon ? coordinates.map(poly => poly[0].map(([lng, lat]) => [lat, lng])) : coordinates[0].map(([lng, lat]) => [lat, lng]),\n            pathOptions: {\n              color: isLanding ? '#5a0000' : 'orange',\n              fillColor: isLanding ? '#8B0000' : 'red',\n              fillOpacity: isLanding ? 0.6 : 0.3,\n              weight: 2\n            }\n          }, `poly-${idx}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this);\n        }), (inv.alienPaths || []).map((alien, i) => {\n          const positions = alien.path.map(step => [step.coordinates[1], step.coordinates[0]]);\n          const last = positions[positions.length - 1];\n          alien.path.forEach((step, i) => {\n            if (!step.coordinates || step.coordinates.length !== 2) {\n              console.warn(`‚ùó Alien ${alien.alienCode} step ${i} missing coordinates`, step);\n            }\n          });\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Polyline, {\n              positions: positions,\n              pathOptions: {\n                color: 'blue',\n                weight: 3,\n                opacity: 0.6,\n                dashArray: '6, 6'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: last,\n              icon: historicalAlienIcon(alien.alienCode || `A${i}`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, `alien-${i}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this);\n        })]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(HistoricalInvasionLayer, \"I0UwBzs2KFe30VrfSfZyQxfDwZ4=\", false, function () {\n  return [useMap];\n});\n_c = HistoricalInvasionLayer;\nvar _c;\n$RefreshReg$(_c, \"HistoricalInvasionLayer\");","map":{"version":3,"names":["React","useEffect","useState","Marker","Polygon","Polyline","useMap","axios","L","jsxDEV","_jsxDEV","Fragment","_Fragment","historicalLandingIcon","divIcon","html","className","iconSize","historicalAlienIcon","code","HistoricalInvasionLayer","visible","municipalities","_s","history","setHistory","map","get","then","res","data","catch","err","console","error","Array","isArray","findPolygonByName","name","features","find","feature","_feature$properties","_feature$properties2","_feature$properties3","polyName","properties","MUN_HEB","MUN_ENG","children","inv","idx","_inv$landing","landing","coordinates","position","icon","fileName","_jsxFileName","lineNumber","columnNumber","poly","i","_poly$properties","_poly$properties2","_poly$properties3","_inv$invadedPolygons","isLanding","trim","toLowerCase","isInvaded","invadedPolygons","some","ip","includes","geometry","isMultiPolygon","type","positions","lng","lat","pathOptions","color","fillColor","fillOpacity","weight","alienPaths","alien","path","step","last","length","forEach","warn","alienCode","opacity","dashArray","_c","$RefreshReg$"],"sources":["C:/Users/Amos/gisApp/frontend/src/layers/HistoricalInvasionLayer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Marker, Polygon, Polyline, useMap } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport L from 'leaflet';\r\n\r\nconst historicalLandingIcon = L.divIcon({\r\n  html: `<div style=\"font-size: 22px;\">üõ∏</div>`,\r\n  className: 'historical-landing-icon',\r\n  iconSize: [30, 30],\r\n});\r\n\r\nconst historicalAlienIcon = (code) =>\r\n  L.divIcon({\r\n    html: `<div style=\"font-size: 20px;\">üëΩ<span style=\"color:#000;font-weight:bold;font-size:12px;\">${code}</span></div>`,\r\n    className: 'historical-alien-icon',\r\n    iconSize: [30, 30],\r\n  });\r\n\r\nexport default function HistoricalInvasionLayer({ visible, municipalities }) {\r\n  const [history, setHistory] = useState([]);\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!visible) return;\r\n\r\n    axios\r\n      .get('http://localhost:5000/api/history')\r\n      .then((res) => setHistory(res.data))\r\n      .catch((err) =>\r\n        console.error('‚ùå Failed to load historical invasions:', err)\r\n      );\r\n  }, [visible]);\r\n\r\n  if (!visible || !Array.isArray(history) || !municipalities) return null;\r\n\r\n  const findPolygonByName = (name) => {\r\n    return municipalities.features.find((feature) => {\r\n      const polyName =\r\n        feature.properties?.MUN_HEB ||\r\n        feature.properties?.MUN_ENG ||\r\n        feature.properties?.name;\r\n      return polyName === name;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {history.map((inv, idx) => (\r\n        <React.Fragment key={idx}>\r\n          {/* üõ∏ Landing Marker */}\r\n          {inv.landing?.coordinates && (\r\n            <Marker\r\n              position={[\r\n                inv.landing.coordinates[1],\r\n                inv.landing.coordinates[0],\r\n              ]}\r\n              icon={historicalLandingIcon}\r\n            />\r\n          )}\r\n\r\n          {/* üî¥ Invaded + Landing Polygons */}\r\n          {municipalities.features.map((poly, i) => {\r\n            const polyName =\r\n              poly.properties?.MUN_HEB ||\r\n              poly.properties?.MUN_ENG ||\r\n              poly.properties?.name ||\r\n              '';\r\n\r\n            const isLanding =\r\n              polyName.trim().toLowerCase() ===\r\n              inv.landing.name.trim().toLowerCase();\r\n\r\n            const isInvaded = inv.invadedPolygons?.some((ip) =>\r\n              [ip.name].includes(polyName)\r\n            );\r\n\r\n            if (!isLanding && !isInvaded) return null;\r\n\r\n            const coordinates = poly.geometry.coordinates;\r\n            const isMultiPolygon = poly.geometry.type === 'MultiPolygon';\r\n\r\n            return (\r\n              <Polygon\r\n                key={`poly-${idx}-${i}`}\r\n                positions={\r\n                  isMultiPolygon\r\n                    ? coordinates.map((poly) =>\r\n                        poly[0].map(([lng, lat]) => [lat, lng])\r\n                      )\r\n                    : coordinates[0].map(([lng, lat]) => [lat, lng])\r\n                }\r\n                pathOptions={{\r\n                  color: isLanding ? '#5a0000' : 'orange',\r\n                  fillColor: isLanding ? '#8B0000' : 'red',\r\n                  fillOpacity: isLanding ? 0.6 : 0.3,\r\n                  weight: 2,\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* üë£ Alien Paths and Icons */}\r\n          {(inv.alienPaths || []).map((alien, i) => {\r\n            const positions = alien.path.map((step) => [\r\n              step.coordinates[1],\r\n              step.coordinates[0],\r\n            ]);\r\n            const last = positions[positions.length - 1];\r\n            alien.path.forEach((step, i) => {\r\n                if (!step.coordinates || step.coordinates.length !== 2) {\r\n                  console.warn(`‚ùó Alien ${alien.alienCode} step ${i} missing coordinates`, step);\r\n                }\r\n              });\r\n              \r\n            return (\r\n              <React.Fragment key={`alien-${i}`}>\r\n                <Polyline\r\n                  positions={positions}\r\n                  pathOptions={{\r\n                    color: 'blue',\r\n                    weight: 3,\r\n                    opacity: 0.6,\r\n                    dashArray: '6, 6',\r\n                  }}\r\n                />\r\n                <Marker\r\n                  position={last}\r\n                  icon={historicalAlienIcon(alien.alienCode || `A${i}`)}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </React.Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,eAAe;AACjE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,CAAC,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExB,MAAMC,qBAAqB,GAAGL,CAAC,CAACM,OAAO,CAAC;EACtCC,IAAI,EAAE,wCAAwC;EAC9CC,SAAS,EAAE,yBAAyB;EACpCC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,mBAAmB,GAAIC,IAAI,IAC/BX,CAAC,CAACM,OAAO,CAAC;EACRC,IAAI,EAAE,6FAA6FI,IAAI,eAAe;EACtHH,SAAS,EAAE,uBAAuB;EAClCC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;AACnB,CAAC,CAAC;AAEJ,eAAe,SAASG,uBAAuBA,CAAC;EAAEC,OAAO;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAC3E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMwB,GAAG,GAAGpB,MAAM,CAAC,CAAC;EAEpBL,SAAS,CAAC,MAAM;IACd,IAAI,CAACoB,OAAO,EAAE;IAEdd,KAAK,CACFoB,GAAG,CAAC,mCAAmC,CAAC,CACxCC,IAAI,CAAEC,GAAG,IAAKJ,UAAU,CAACI,GAAG,CAACC,IAAI,CAAC,CAAC,CACnCC,KAAK,CAAEC,GAAG,IACTC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEF,GAAG,CAC7D,CAAC;EACL,CAAC,EAAE,CAACX,OAAO,CAAC,CAAC;EAEb,IAAI,CAACA,OAAO,IAAI,CAACc,KAAK,CAACC,OAAO,CAACZ,OAAO,CAAC,IAAI,CAACF,cAAc,EAAE,OAAO,IAAI;EAEvE,MAAMe,iBAAiB,GAAIC,IAAI,IAAK;IAClC,OAAOhB,cAAc,CAACiB,QAAQ,CAACC,IAAI,CAAEC,OAAO,IAAK;MAAA,IAAAC,mBAAA,EAAAC,oBAAA,EAAAC,oBAAA;MAC/C,MAAMC,QAAQ,GACZ,EAAAH,mBAAA,GAAAD,OAAO,CAACK,UAAU,cAAAJ,mBAAA,uBAAlBA,mBAAA,CAAoBK,OAAO,OAAAJ,oBAAA,GAC3BF,OAAO,CAACK,UAAU,cAAAH,oBAAA,uBAAlBA,oBAAA,CAAoBK,OAAO,OAAAJ,oBAAA,GAC3BH,OAAO,CAACK,UAAU,cAAAF,oBAAA,uBAAlBA,oBAAA,CAAoBN,IAAI;MAC1B,OAAOO,QAAQ,KAAKP,IAAI;IAC1B,CAAC,CAAC;EACJ,CAAC;EAED,oBACE5B,OAAA,CAAAE,SAAA;IAAAqC,QAAA,EACGzB,OAAO,CAACE,GAAG,CAAC,CAACwB,GAAG,EAAEC,GAAG;MAAA,IAAAC,YAAA;MAAA,oBACpB1C,OAAA,CAACV,KAAK,CAACW,QAAQ;QAAAsC,QAAA,GAEZ,EAAAG,YAAA,GAAAF,GAAG,CAACG,OAAO,cAAAD,YAAA,uBAAXA,YAAA,CAAaE,WAAW,kBACvB5C,OAAA,CAACP,MAAM;UACLoD,QAAQ,EAAE,CACRL,GAAG,CAACG,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC,EAC1BJ,GAAG,CAACG,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC,CAC1B;UACFE,IAAI,EAAE3C;QAAsB;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CACF,EAGAtC,cAAc,CAACiB,QAAQ,CAACb,GAAG,CAAC,CAACmC,IAAI,EAAEC,CAAC,KAAK;UAAA,IAAAC,gBAAA,EAAAC,iBAAA,EAAAC,iBAAA,EAAAC,oBAAA;UACxC,MAAMrB,QAAQ,GACZ,EAAAkB,gBAAA,GAAAF,IAAI,CAACf,UAAU,cAAAiB,gBAAA,uBAAfA,gBAAA,CAAiBhB,OAAO,OAAAiB,iBAAA,GACxBH,IAAI,CAACf,UAAU,cAAAkB,iBAAA,uBAAfA,iBAAA,CAAiBhB,OAAO,OAAAiB,iBAAA,GACxBJ,IAAI,CAACf,UAAU,cAAAmB,iBAAA,uBAAfA,iBAAA,CAAiB3B,IAAI,KACrB,EAAE;UAEJ,MAAM6B,SAAS,GACbtB,QAAQ,CAACuB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAC7BnB,GAAG,CAACG,OAAO,CAACf,IAAI,CAAC8B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UAEvC,MAAMC,SAAS,IAAAJ,oBAAA,GAAGhB,GAAG,CAACqB,eAAe,cAAAL,oBAAA,uBAAnBA,oBAAA,CAAqBM,IAAI,CAAEC,EAAE,IAC7C,CAACA,EAAE,CAACnC,IAAI,CAAC,CAACoC,QAAQ,CAAC7B,QAAQ,CAC7B,CAAC;UAED,IAAI,CAACsB,SAAS,IAAI,CAACG,SAAS,EAAE,OAAO,IAAI;UAEzC,MAAMhB,WAAW,GAAGO,IAAI,CAACc,QAAQ,CAACrB,WAAW;UAC7C,MAAMsB,cAAc,GAAGf,IAAI,CAACc,QAAQ,CAACE,IAAI,KAAK,cAAc;UAE5D,oBACEnE,OAAA,CAACN,OAAO;YAEN0E,SAAS,EACPF,cAAc,GACVtB,WAAW,CAAC5B,GAAG,CAAEmC,IAAI,IACnBA,IAAI,CAAC,CAAC,CAAC,CAACnC,GAAG,CAAC,CAAC,CAACqD,GAAG,EAAEC,GAAG,CAAC,KAAK,CAACA,GAAG,EAAED,GAAG,CAAC,CACxC,CAAC,GACDzB,WAAW,CAAC,CAAC,CAAC,CAAC5B,GAAG,CAAC,CAAC,CAACqD,GAAG,EAAEC,GAAG,CAAC,KAAK,CAACA,GAAG,EAAED,GAAG,CAAC,CAClD;YACDE,WAAW,EAAE;cACXC,KAAK,EAAEf,SAAS,GAAG,SAAS,GAAG,QAAQ;cACvCgB,SAAS,EAAEhB,SAAS,GAAG,SAAS,GAAG,KAAK;cACxCiB,WAAW,EAAEjB,SAAS,GAAG,GAAG,GAAG,GAAG;cAClCkB,MAAM,EAAE;YACV;UAAE,GAbG,QAAQlC,GAAG,IAAIW,CAAC,EAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcxB,CAAC;QAEN,CAAC,CAAC,EAGD,CAACV,GAAG,CAACoC,UAAU,IAAI,EAAE,EAAE5D,GAAG,CAAC,CAAC6D,KAAK,EAAEzB,CAAC,KAAK;UACxC,MAAMgB,SAAS,GAAGS,KAAK,CAACC,IAAI,CAAC9D,GAAG,CAAE+D,IAAI,IAAK,CACzCA,IAAI,CAACnC,WAAW,CAAC,CAAC,CAAC,EACnBmC,IAAI,CAACnC,WAAW,CAAC,CAAC,CAAC,CACpB,CAAC;UACF,MAAMoC,IAAI,GAAGZ,SAAS,CAACA,SAAS,CAACa,MAAM,GAAG,CAAC,CAAC;UAC5CJ,KAAK,CAACC,IAAI,CAACI,OAAO,CAAC,CAACH,IAAI,EAAE3B,CAAC,KAAK;YAC5B,IAAI,CAAC2B,IAAI,CAACnC,WAAW,IAAImC,IAAI,CAACnC,WAAW,CAACqC,MAAM,KAAK,CAAC,EAAE;cACtD1D,OAAO,CAAC4D,IAAI,CAAC,WAAWN,KAAK,CAACO,SAAS,SAAShC,CAAC,sBAAsB,EAAE2B,IAAI,CAAC;YAChF;UACF,CAAC,CAAC;UAEJ,oBACE/E,OAAA,CAACV,KAAK,CAACW,QAAQ;YAAAsC,QAAA,gBACbvC,OAAA,CAACL,QAAQ;cACPyE,SAAS,EAAEA,SAAU;cACrBG,WAAW,EAAE;gBACXC,KAAK,EAAE,MAAM;gBACbG,MAAM,EAAE,CAAC;gBACTU,OAAO,EAAE,GAAG;gBACZC,SAAS,EAAE;cACb;YAAE;cAAAvC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACFlD,OAAA,CAACP,MAAM;cACLoD,QAAQ,EAAEmC,IAAK;cACflC,IAAI,EAAEtC,mBAAmB,CAACqE,KAAK,CAACO,SAAS,IAAI,IAAIhC,CAAC,EAAE;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvD,CAAC;UAAA,GAbiB,SAASE,CAAC,EAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcjB,CAAC;QAErB,CAAC,CAAC;MAAA,GAnFiBT,GAAG;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAoFR,CAAC;IAAA,CAClB;EAAC,gBACF,CAAC;AAEP;AAACrC,EAAA,CAtHuBH,uBAAuB;EAAA,QAEjCd,MAAM;AAAA;AAAA2F,EAAA,GAFI7E,uBAAuB;AAAA,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}